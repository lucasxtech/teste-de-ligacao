import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { CheckCircle, XCircle, AlertTriangle, Loader2, HelpCircle } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";

export type DiagnosticStatus = "success" | "error" | "warning" | "loading" | "pending";

interface DiagnosticCardProps {
  title: string;
  description?: string;
  status: DiagnosticStatus;
  value?: string;
  className?: string;
  explanation?: string;
  technical?: string;
}

const statusConfig = {
  success: {
    icon: CheckCircle,
    bgColor: "bg-success/10",
    iconColor: "text-success",
    borderColor: "border-success/20"
  },
  error: {
    icon: XCircle,
    bgColor: "bg-error/10", 
    iconColor: "text-error",
    borderColor: "border-error/20"
  },
  warning: {
    icon: AlertTriangle,
    bgColor: "bg-warning/10",
    iconColor: "text-warning", 
    borderColor: "border-warning/20"
  },
  loading: {
    icon: Loader2,
    bgColor: "bg-muted/50",
    iconColor: "text-muted-foreground animate-spin",
    borderColor: "border-muted"
  },
  pending: {
    icon: Loader2,
    bgColor: "bg-info/5",
    iconColor: "text-info",
    borderColor: "border-info/20"
  }
};

export const DiagnosticCard = ({ 
  title, 
  description, 
  status, 
  value, 
  className,
  explanation,
  technical
}: DiagnosticCardProps) => {
  const config = statusConfig[status];
  const Icon = config.icon;
  
  const displayDescription = status === "loading" ? "‚è≥ Em an√°lise..." : 
                            status === "pending" ? "‚è±Ô∏è Aguardando..." : description;

  // Tooltips explicativos para todos os testes
  const getSpecificTooltip = () => {
    // Casos problem√°ticos espec√≠ficos
    if (title.includes("IP detectado") && status === "error") {
      return "‚ö†Ô∏è N√£o foi poss√≠vel identificar corretamente o IP ou obter dados completos da sua rede.\nIsso pode ser causado por:\n‚Ä¢ Uso de VPN ou proxy\n‚Ä¢ Bloqueios de firewall\n‚Ä¢ Extens√µes no navegador que interferem na rede\nTente desativar VPNs e extens√µes, ou usar outra rede.";
    }
    if (title.includes("Qualidade da conex√£o") && description?.includes("N√£o testado")) {
      return "‚ö†Ô∏è N√£o conseguimos medir a qualidade da sua conex√£o (lat√™ncia e estabilidade).\nIsso pode ocorrer por:\n‚Ä¢ Bloqueio de testes via firewall ou antiv√≠rus\n‚Ä¢ Navegador com permiss√µes limitadas\n‚Ä¢ Falha tempor√°ria na rede\nTente recarregar a p√°gina ou testar em outra rede.";
    }
    if (title.includes("ICE candidates") && status === "loading") {
      return "‚è≥ Estamos tentando identificar poss√≠veis rotas para chamadas (WebRTC).\nIsso pode ficar preso em 'em an√°lise' quando:\n‚Ä¢ H√° bloqueio de conex√µes UDP\n‚Ä¢ A rede usa NAT sim√©trico ou CGNAT\n‚Ä¢ O navegador ou rede bloqueia servidores STUN";
    }
    
    // Tooltips explicativos gerais
    if (title.includes("Microfone")) {
      return "üé§ Verifica se o navegador tem acesso ao microfone e se est√° funcionando corretamente.\nNecess√°rio para chamadas de voz e v√≠deo.";
    }
    if (title.includes("C√¢mera")) {
      return "üìπ Verifica se o navegador tem acesso √† c√¢mera e se est√° funcionando corretamente.\nNecess√°rio para chamadas de v√≠deo.";
    }
    if (title.includes("Navegador")) {
      return "üåê Verifica se o navegador suporta as tecnologias necess√°rias para chamadas (WebRTC).\nChrome, Firefox e Safari s√£o recomendados.";
    }
    if (title.includes("Sistema operacional")) {
      return "üíª Verifica informa√ß√µes b√°sicas do sistema operacional.\nAlguns sistemas podem ter limita√ß√µes espec√≠ficas.";
    }
    if (title.includes("Conex√£o de rede")) {
      return "üåê Verifica se a conex√£o de internet est√° funcionando e se permite comunica√ß√£o WebRTC.\nConex√µes inst√°veis podem causar problemas nas chamadas.";
    }
    if (title.includes("WebRTC")) {
      return "‚òéÔ∏è WebRTC √© a tecnologia que permite chamadas diretas entre navegadores.\nVerifica se todos os componentes necess√°rios est√£o funcionando.";
    }
    if (title.includes("STUN/TURN")) {
      return "üîÑ STUN/TURN s√£o servidores que ajudam a estabelecer conex√µes WebRTC.\nNecess√°rios para conectar atrav√©s de firewalls e NAT.";
    }
    if (title.includes("ICE candidates")) {
      return "üîó ICE candidates s√£o poss√≠veis rotas de conex√£o identificadas pelo navegador.\nQuanto mais candidatos, melhor a chance de conex√£o bem-sucedida.";
    }
    if (title.includes("Permiss√µes")) {
      return "üîê Verifica se o navegador tem as permiss√µes necess√°rias para microfone e c√¢mera.\nEssas permiss√µes s√£o essenciais para chamadas.";
    }
    if (title.includes("Codecs")) {
      return "üéµ Verifica quais formatos de √°udio e v√≠deo o navegador suporta.\nCodecs compat√≠veis garantem melhor qualidade de chamada.";
    }
    
    return explanation;
  };

  return (
    <TooltipProvider>
      <Card className={cn(
        "transition-all duration-300 hover:shadow-lg border-2 rounded-2xl bg-gradient-to-br from-background to-muted/20 shadow-diagnostic",
        config.borderColor,
        status === "loading" && "animate-pulse",
        className
      )}>
        <CardHeader className="text-center pb-4">
          <CardTitle className="text-xl font-semibold text-foreground mb-2 flex items-center justify-center gap-3">
            <div className={cn(
              "p-3 rounded-full",
              status === "success" && "bg-success/10",
              status === "error" && "bg-error/10", 
              status === "warning" && "bg-warning/10",
              status === "loading" && "bg-muted/10",
              status === "pending" && "bg-info/10"
            )}>
              <Icon className={cn("h-6 w-6", config.iconColor)} />
            </div>
            <span className="flex-1">{title}</span>
            {getSpecificTooltip() && (
              <Tooltip>
                <TooltipTrigger asChild>
                  <button className="p-1 hover:bg-muted/20 rounded-full transition-colors">
                    <HelpCircle className="h-4 w-4 text-muted-foreground" />
                  </button>
                </TooltipTrigger>
                <TooltipContent className="max-w-sm">
                  <p className="text-sm whitespace-pre-line">{getSpecificTooltip()}</p>
                </TooltipContent>
              </Tooltip>
            )}
          </CardTitle>
        </CardHeader>
        
        {(displayDescription || value || technical) && (
          <CardContent className="space-y-4">
            {displayDescription && (
              <div className="text-center">
                <p className="text-lg text-muted-foreground leading-relaxed">
                  {displayDescription}
                </p>
              </div>
            )}
            
            {value && (
              <div className="p-4 bg-muted/20 rounded-xl text-center">
                <div className="text-2xl font-bold text-primary mb-1">
                  {value}
                </div>
              </div>
            )}
            
            {technical && (
              <div className="p-3 bg-muted/10 rounded-xl text-center">
                <p className="text-sm text-muted-foreground font-medium">
                  {technical}
                </p>
              </div>
            )}
          </CardContent>
        )}
      </Card>
    </TooltipProvider>
  );
};